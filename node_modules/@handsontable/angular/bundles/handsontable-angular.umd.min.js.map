{
  "version": 3,
  "file": "handsontable-angular.umd.min.js",
  "sources": [
    "ng://@handsontable/angular/lib/ce/src/hot-table-registerer.service.ts",
    "ng://@handsontable/angular/lib/ce/src/hot-settings-resolver.service.ts",
    "ng://@handsontable/angular/lib/ce/src/hot-table.component.ts",
    "ng://@handsontable/angular/lib/ce/src/hot-column.component.ts",
    "ng://@handsontable/angular/lib/ce/src/hot-table.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\nimport * as Handsontable from 'handsontable';\n\nconst instances = new Map<string, Handsontable>();\n\n@Injectable()\nexport class HotTableRegisterer {\n  public getInstance(id: string): Handsontable {\n    return instances.get(id);\n  }\n\n  public registerInstance(id: string, instance: Handsontable): void {\n    instances.set(id, instance);\n  }\n\n  public removeInstance(id: string): void {\n    instances.delete(id);\n  }\n}\n",
    "import { Injectable, SimpleChanges } from '@angular/core';\n\nconst AVAILABLE_OPTIONS: string[] = ['allowEmpty', 'allowHtml', 'allowInsertColumn', 'allowInsertRow',\n'allowInvalid', 'allowRemoveColumn', 'allowRemoveRow', 'autoColumnSize', 'autoComplete', 'autoRowSize',\n'autoWrapCol', 'autoWrapRow', 'cell', 'cells', 'checkedTemplate', 'className', 'colHeaders', 'columnHeaderHeight',\n'columns', 'columnSorting', 'colWidths', 'commentedCellClassName', 'comments', 'contextMenu', 'copyable',\n'copyPaste', 'correctFormat', 'currentColClassName', 'currentHeaderClassName', 'currentRowClassName',\n'customBorders', 'data', 'dataSchema', 'dateFormat', 'debug', 'defaultDate', 'disableVisualSelection',\n'dragToScroll', 'editor', 'enterBeginsEditing', 'enterMoves', 'fillHandle', 'filter', 'filteringCaseSensitive',\n'fixedColumnsLeft', 'fixedRowsTop', 'fragmentSelection', 'height', 'invalidCellClassName', 'label',\n'language', 'manualColumnFreeze', 'manualColumnMove', 'manualColumnResize', 'manualRowMove', 'manualRowResize',\n'maxCols', 'maxRows', 'mergeCells', 'minCols', 'minRows', 'minSpareCols', 'minSpareRows', 'multiSelect',\n'noWordWrapClassName', 'numericFormat', 'observeChanges', 'observeDOMVisibility', 'outsideClickDeselects',\n'persistentState', 'placeholder', 'placeholderCellClassName', 'preventOverflow', 'readOnly',\n'readOnlyCellClassName', 'renderAllRows', 'renderer', 'rowHeaders', 'rowHeaderWidth', 'rowHeights',\n'search', 'selectOptions', 'skipColumnOnPaste', 'sortByRelevance', 'sortFunction', 'sortIndicator',\n'source', 'startCols', 'startRows', 'stretchH', 'strict', 'tableClassName', 'tabMoves', 'title',\n'trimDropdown', 'trimWhitespace', 'type', 'uncheckedTemplate', 'undo', 'validator',\n'viewportColumnRenderingOffset', 'viewportRowRenderingOffset', 'visibleRows', 'width', 'wordWrap'];\n\nconst AVAILABLE_HOOKS: string[] = ['afterBeginEditing', 'afterCellMetaReset', 'afterChange',\n'afterChangesObserved', 'afterColumnMove', 'afterColumnResize', 'afterColumnSort',\n'afterContextMenuDefaultOptions', 'afterContextMenuHide', 'afterContextMenuShow', 'afterCopy',\n'afterCopyLimit', 'afterCreateCol', 'afterCreateRow', 'afterCut', 'afterDeselect', 'afterDestroy',\n'afterDocumentKeyDown', 'afterGetCellMeta', 'afterGetColHeader', 'afterGetColumnHeaderRenderers',\n'afterGetRowHeader', 'afterGetRowHeaderRenderers', 'afterInit', 'afterLanguageChange', 'afterListen',\n'afterLoadData', 'afterModifyTransformEnd', 'afterModifyTransformStart', 'afterMomentumScroll',\n'afterOnCellCornerDblClick', 'afterOnCellCornerMouseDown', 'afterOnCellMouseDown',\n'afterOnCellMouseOut', 'afterOnCellMouseOver', 'afterPaste', 'afterPluginsInitialized', 'afterRedo',\n'afterRemoveCellMeta', 'afterRemoveCol', 'afterRemoveRow', 'afterRender', 'afterRenderer',\n'afterRowMove', 'afterRowResize', 'afterScrollHorizontally', 'afterScrollVertically', 'afterSelection',\n'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'afterSetCellMeta',\n'afterSetDataAtCell', 'afterSetDataAtRowProp', 'afterUndo', 'afterUnlisten', 'afterUpdateSettings',\n'afterValidate', 'afterViewportColumnCalculatorOverride', 'afterViewportRowCalculatorOverride',\n'beforeAutofill', 'beforeAutofillInsidePopulate', 'beforeCellAlignment', 'beforeChange', 'beforeChangeRender',\n'beforeColumnMove', 'beforeColumnResize', 'beforeColumnSort', 'beforeContextMenuSetItems', 'beforeCopy',\n'beforeCreateCol', 'beforeCreateRow', 'beforeCut', 'beforeDrawBorders', 'beforeGetCellMeta', 'beforeInit',\n'beforeInitWalkontable', 'beforeKeyDown', 'beforeLanguageChange', 'beforeOnCellMouseDown', 'beforeOnCellMouseOut',\n'beforeOnCellMouseOver', 'beforePaste', 'beforeRedo', 'beforeRemoveCellMeta', 'beforeRemoveCol',\n'beforeRemoveRow', 'beforeRender', 'beforeRenderer', 'beforeRowMove', 'beforeRowResize', 'beforeSetRangeEnd',\n'beforeSetRangeEnd', 'beforeStretchingColumnWidth', 'beforeTouchScroll', 'beforeUndo', 'beforeValidate',\n'beforeValueRender', 'construct', 'init', 'manualRowHeights', 'modifyAutofillRange', 'modifyCol',\n'modifyColHeader', 'modifyColumnHeaderHeight', 'modifyColWidth', 'modifyCopyableRange', 'modifyData',\n'modifyRow', 'modifyRowData', 'modifyRowHeader', 'modifyRowHeaderWidth', 'modifyRowHeight', 'modifyTransformEnd',\n'modifyTransformStart', 'persistentStateLoad', 'persistentStateReset', 'persistentStateSave',\n'skipLengthCache', 'unmodifyCol', 'unmodifyRow'];\n\n@Injectable()\nexport class HotSettingsResolver {\n  private hooks = AVAILABLE_HOOKS;\n  private options = AVAILABLE_OPTIONS;\n\n  mergeSettings(component): object {\n    const mergedSettings: object = {};\n\n    if (component['settings'] !== void 0) {\n      Object.keys(component['settings']).forEach((key) => {\n        if (this.hooks.indexOf(key) > -1) {\n          mergedSettings[key] = (p1, p2, p3, p4, p5, p6) => {\n            return component._ngZone.run(() => {\n              return component['settings'][key](p1, p2, p3, p4, p5, p6);\n            })\n          };\n        } else {\n          mergedSettings[key] = component['settings'][key];\n        }\n      });\n    }\n\n    this.options.forEach((key) => {\n      const option = component[key];\n\n      if (option !== void 0) {\n        mergedSettings[key] = option;\n      }\n    });\n\n    this.hooks.forEach((key) => {\n      const hook = component[key];\n\n      if (hook && hook.observers.length > 0) {\n        mergedSettings[key] = (p1,  p2,  p3,  p4,  p5,  p6) => {\n          component._ngZone.run(() => {\n            component[key].emit({ hotInstance: component.hotInstance, params: [p1,  p2,  p3,  p4,  p5,  p6] });\n          });\n        };\n      }\n    });\n\n    return mergedSettings;\n  }\n\n  prepareChanges(changes: SimpleChanges): object {\n    const result: object = {};\n    const parameters: string[] = Object.keys(changes);\n\n    parameters.forEach((param) => {\n      if (changes.hasOwnProperty(param)) {\n        result[param] = changes[param].currentValue;\n      }\n    });\n\n    return result;\n  }\n}\n",
    "import {\n  Component,\n  ElementRef,\n  NgZone,\n  AfterContentInit,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\nimport * as Handsontable from 'handsontable';\n\nimport { HotTableRegisterer } from './hot-table-registerer.service';\nimport { HotSettingsResolver } from './hot-settings-resolver.service';\nimport { HotColumnComponent } from './hot-column.component';\n\n@Component({\n  // tslint:disable-next-line\n  selector: 'hot-table',\n  template: '',\n  encapsulation: ViewEncapsulation.None,\n  providers: [ HotTableRegisterer, HotSettingsResolver ],\n})\n\nexport class HotTableComponent implements AfterContentInit, OnChanges, OnDestroy, OnInit {\n  private hotInstance: Handsontable;\n  private container: HTMLElement;\n  private columnsComponents: HotColumnComponent[] = [];\n\n  @Input() settings: object;\n  @Input() hotId: string;\n\n  @Input() allowEmpty: boolean;\n  @Input() allowHtml: boolean;\n  @Input() allowInsertColumn: boolean;\n  @Input() allowInsertRow: boolean;\n  @Input() allowInvalid: boolean;\n  @Input() allowRemoveColumn: boolean;\n  @Input() allowRemoveRow: boolean;\n  @Input() autoColumnSize: boolean | object;\n  @Input() autoComplete: any[];\n  @Input() autoRowSize: boolean | object;\n  @Input() autoWrapCol: boolean;\n  @Input() autoWrapRow: boolean;\n  @Input() cell: any[];\n  @Input() cells: (row: number, column: number, prop: object) => object;\n  @Input() checkedTemplate: boolean | string;\n  @Input() className: string | string[];\n  @Input() colHeaders: boolean | string[] | ((column: number) => string);\n  @Input() columnHeaderHeight: number | number[];\n  @Input() columns: object[] | ((column: number) => object);\n  @Input() columnSorting: boolean | object;\n  @Input() colWidths: number | number[] | string | ((column: number) => number);\n  @Input() commentedCellClassName: string;\n  @Input() comments: boolean | object[];\n  @Input() contextMenu: boolean | object | object[];\n  @Input() copyable: boolean;\n  @Input() copyPaste: boolean | object;\n  @Input() correctFormat: boolean;\n  @Input() currentColClassName: string;\n  @Input() currentHeaderClassName: string;\n  @Input() currentRowClassName: string;\n  @Input() customBorders: boolean | object[];\n  @Input() data: any[];\n  @Input() dataSchema: object;\n  @Input() dateFormat: string;\n  @Input() debug: boolean;\n  @Input() defaultDate: string;\n  @Input() disableVisualSelection: boolean | string | string[];\n  @Input() dragToScroll: boolean;\n  @Input() editor: boolean | string | (() => void);\n  @Input() enterBeginsEditing: boolean;\n  @Input() enterMoves: object | (() => void);\n  @Input() fillHandle: boolean | string | object;\n  @Input() filter: boolean;\n  @Input() filteringCaseSensitive: boolean;\n  @Input() fixedColumnsLeft: number;\n  @Input() fixedRowsTop: number;\n  @Input() format: string;\n  @Input() fragmentSelection: boolean | string;\n  @Input() height: number | (() => number);\n  @Input() invalidCellClassName: string;\n  @Input() label: object;\n  @Input() language: string;\n  @Input() manualColumnFreeze: boolean;\n  @Input() manualColumnMove: boolean | number[];\n  @Input() manualColumnResize: boolean | number[];\n  @Input() manualRowMove: boolean | number[];\n  @Input() manualRowResize: boolean | number[];\n  @Input() maxCols: number;\n  @Input() maxRows: number;\n  @Input() mergeCells: boolean | object[];\n  @Input() minCols: number;\n  @Input() minRows: number;\n  @Input() minSpareCols: number;\n  @Input() minSpareRows: number;\n  @Input() multiSelect: boolean;\n  @Input() noWordWrapClassName: string;\n  @Input() numericFormat: any;\n  @Input() observeChanges: boolean;\n  @Input() observeDOMVisibility: boolean;\n  @Input() outsideClickDeselects: boolean | ((event: Event) => boolean);\n  @Input() pasteMode: string;\n  @Input() persistentState: boolean;\n  @Input() placeholder: any;\n  @Input() placeholderCellClassName: string;\n  @Input() preventOverflow: boolean | string;\n  @Input() readOnly: boolean;\n  @Input() readOnlyCellClassName: string;\n  @Input() renderAllRows: boolean;\n  @Input() renderer: string | (() => void);\n  @Input() rowHeaders: boolean | string[] | (() => string);\n  @Input() rowHeaderWidth: number | number[];\n  @Input() rowHeights: number | number[] | string | ((row: number) => number);\n  @Input() search: boolean;\n  @Input() selectOptions: string[] | number[];\n  @Input() skipColumnOnPaste: boolean;\n  @Input() sortByRelevance: boolean;\n  @Input() sortFunction: (sortOrder: boolean) => void;\n  @Input() sortIndicator: boolean;\n  @Input() source: any[] | (() => void);\n  @Input() startCols: number;\n  @Input() startRows: number;\n  @Input() stretchH: string;\n  @Input() strict: boolean;\n  @Input() tableClassName: string | string[];\n  @Input() tabMoves: object;\n  @Input() title: string;\n  @Input() trimDropdown: boolean;\n  @Input() trimWhitespace: boolean;\n  @Input() type: string;\n  @Input() uncheckedTemplate: boolean | string;\n  @Input() undo: boolean;\n  @Input() validator: string | RegExp | (() => void);\n  @Input() viewportColumnRenderingOffset: number | string;\n  @Input() viewportRowRenderingOffset: number | string;\n  @Input() visibleRows: number;\n  @Input() width: number| (() => number);\n  @Input() wordWrap: boolean;\n\n  @Output() afterBeginEditing: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterCellMetaReset: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterChange: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterChangesObserved: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterColumnMove: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterColumnResize: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterColumnSort: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterContextMenuDefaultOptions: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterContextMenuHide: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterContextMenuShow: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterCopy: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterCopyLimit: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterCreateCol: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterCreateRow: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterCut: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterDeselect: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterDestroy: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterDocumentKeyDown: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterGetCellMeta: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterGetColHeader: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterGetColumnHeaderRenderers: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterGetRowHeader: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterGetRowHeaderRenderers: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterInit: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterLanguageChange: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterListen: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterLoadData: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterModifyTransformEnd: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterModifyTransformStart: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterMomentumScroll: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterOnCellCornerDblClick: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterOnCellCornerMouseDown: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterOnCellMouseDown: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterOnCellMouseOut: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterOnCellMouseOver: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterPaste: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterPluginsInitialized: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRedo: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRemoveCellMeta: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRemoveCol: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRemoveRow: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRender: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRenderer: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRowMove: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterRowResize: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterScrollHorizontally: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterScrollVertically: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSelection: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSelectionByProp: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSelectionEnd: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSelectionEndByProp: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSetCellMeta: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSetDataAtCell: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterSetDataAtRowProp: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterUndo: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterUnlisten: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterUpdateSettings: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterValidate: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterViewportColumnCalculatorOverride: EventEmitter<any[]> = new EventEmitter();\n  @Output() afterViewportRowCalculatorOverride: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeAutofill: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeAutofillInsidePopulate: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeCellAlignment: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeChange: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeChangeRender: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeColumnMove: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeColumnResize: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeColumnSort: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeContextMenuSetItems: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeCopy: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeCreateCol: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeCreateRow: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeCut: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeDrawBorders: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeGetCellMeta: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeInit: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeInitWalkontable: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeKeyDown: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeLanguageChange: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeOnCellMouseDown: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeOnCellMouseOut: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeOnCellMouseOver: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforePaste: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRedo: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRemoveCellMeta: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRemoveCol: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRemoveRow: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRender: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRenderer: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRowMove: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeRowResize: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeSetRangeEnd: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeSetRangeStart: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeStretchingColumnWidth: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeTouchScroll: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeUndo: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeValidate: EventEmitter<any[]> = new EventEmitter();\n  @Output() beforeValueRender: EventEmitter<any[]> = new EventEmitter();\n  @Output() construct: EventEmitter<any[]> = new EventEmitter();\n  @Output() init: EventEmitter<any[]> = new EventEmitter();\n  @Output() manualRowHeights: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyAutofillRange: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyCol: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyColHeader: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyColumnHeaderHeight: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyColWidth: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyCopyableRange: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyData: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyRow: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyRowData: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyRowHeader: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyRowHeaderWidth: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyRowHeight: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyTransformEnd: EventEmitter<any[]> = new EventEmitter();\n  @Output() modifyTransformStart: EventEmitter<any[]> = new EventEmitter();\n  @Output() persistentStateLoad: EventEmitter<any[]> = new EventEmitter();\n  @Output() persistentStateReset: EventEmitter<any[]> = new EventEmitter();\n  @Output() persistentStateSave: EventEmitter<any[]> = new EventEmitter();\n  @Output() skipLengthCache: EventEmitter<any[]> = new EventEmitter();\n  @Output() unmodifyCol: EventEmitter<any[]> = new EventEmitter();\n  @Output() unmodifyRow: EventEmitter<any[]> = new EventEmitter();\n\n  constructor(\n    private el: ElementRef,\n    private _ngZone: NgZone,\n    private _hotTableRegisterer: HotTableRegisterer,\n    private _hotSettingsResolver: HotSettingsResolver\n  ) { }\n\n  ngOnInit() {\n    this.container = document.createElement('div');\n\n    if (this.hotId) {\n      this.container.id = this.hotId;\n    }\n\n    this.el.nativeElement.appendChild(this.container);\n  }\n\n  ngAfterContentInit() {\n    const options = this._hotSettingsResolver.mergeSettings(this);\n\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      options['columns'] = columns;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance = new Handsontable(this.container, options);\n    });\n\n    if (this.hotId) {\n      this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.hotInstance === void 0) {\n      return;\n    }\n\n    const newOptions = this._hotSettingsResolver.prepareChanges(changes);\n\n    this.updateHotTable(newOptions);\n  }\n\n  ngOnDestroy() {\n    this.hotInstance.destroy();\n\n    if (this.hotId) {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n    }\n\n    this.el.nativeElement.removeChild(this.container);\n    this.container = void 0;\n  }\n\n  updateHotTable(newSettings: object) {\n    if (!this.hotInstance) {\n      return;\n    }\n    this.hotInstance.updateSettings(newSettings, false);\n  }\n\n  onAfterColumnsChange() {\n    if (this.columnsComponents === void 0) {\n      return;\n    }\n\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      const newOptions = {\n        columns: columns\n      };\n\n      this.updateHotTable(newOptions);\n    }\n  }\n\n  onAfterColumnsNumberChange() {\n    const columns = [];\n\n    if (this.columnsComponents.length > 0) {\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n    }\n\n    this.updateHotTable({columns: columns});\n  }\n\n  addColumn(column: HotColumnComponent) {\n    this.columnsComponents.push(column);\n    this.onAfterColumnsNumberChange();\n  }\n\n  removeColumn(column: HotColumnComponent) {\n    const index = this.columnsComponents.indexOf(column);\n\n    this.columnsComponents.splice(index, 1);\n    this.onAfterColumnsNumberChange();\n  }\n}\n",
    "import {\n  Component,\n  Injector,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  Input,\n} from '@angular/core';\n\nimport { HotTableComponent } from './hot-table.component';\n\n@Component({\n  // tslint:disable-next-line\n  selector: 'hot-column',\n  template: '',\n})\n\nexport class HotColumnComponent implements OnInit, OnChanges, OnDestroy {\n  private parentComponent: HotTableComponent;\n  private firstRun = true;\n\n  @Input() allowEmpty: boolean;\n  @Input() allowHtml: boolean;\n  @Input() allowInsertColumn: boolean;\n  @Input() allowInsertRow: boolean;\n  @Input() allowInvalid: boolean;\n  @Input() allowRemoveColumn: boolean;\n  @Input() allowRemoveRow: boolean;\n  @Input() autoColumnSize: boolean | object;\n  @Input() autoComplete: any[];\n  @Input() autoRowSize: boolean | object;\n  @Input() autoWrapCol: boolean;\n  @Input() autoWrapRow: boolean;\n  @Input() cell: any[];\n  @Input() cells: (row: number, column: number, prop: object) => object;\n  @Input() checkedTemplate: boolean | string;\n  @Input() className: string | string[];\n  @Input() colHeaders: boolean | string[] | ((column: number) => string);\n  @Input() columnHeaderHeight: number | number[];\n  @Input() columns: object[] | ((column: number) => object);\n  @Input() columnSorting: boolean | object;\n  @Input() colWidths: number | number[] | string | ((column: number) => number);\n  @Input() commentedCellClassName: string;\n  @Input() comments: boolean | object[];\n  @Input() contextMenu: boolean | object | object[];\n  @Input() copyable: boolean;\n  @Input() copyPaste: boolean;\n  @Input() correctFormat: boolean;\n  @Input() currentColClassName: string;\n  @Input() currentHeaderClassName: string;\n  @Input() currentRowClassName: string;\n  @Input() customBorders: boolean | object[];\n  @Input() data: any[];\n  @Input() dataSchema: object;\n  @Input() dateFormat: string;\n  @Input() debug: boolean;\n  @Input() defaultDate: string;\n  @Input() disableVisualSelection: boolean | string | string[];\n  @Input() dragToScroll: boolean;\n  @Input() editor: boolean | string | (() => void);\n  @Input() enterBeginsEditing: boolean;\n  @Input() enterMoves: object | (() => void);\n  @Input() fillHandle: boolean | string | object;\n  @Input() filter: boolean;\n  @Input() filteringCaseSensitive: boolean;\n  @Input() fixedColumnsLeft: number;\n  @Input() fixedRowsTop: number;\n  @Input() fragmentSelection: boolean | string;\n  @Input() height: number | (() => number);\n  @Input() invalidCellClassName: string;\n  @Input() label: object;\n  @Input() language: string;\n  @Input() manualColumnFreeze: boolean;\n  @Input() manualColumnMove: boolean | number[];\n  @Input() manualColumnResize: boolean | number[];\n  @Input() manualRowMove: boolean | number[];\n  @Input() manualRowResize: boolean | number[];\n  @Input() maxCols: number;\n  @Input() maxRows: number;\n  @Input() mergeCells: boolean | object[];\n  @Input() minCols: number;\n  @Input() minRows: number;\n  @Input() minSpareCols: number;\n  @Input() minSpareRows: number;\n  @Input() multiSelect: boolean;\n  @Input() noWordWrapClassName: string;\n  @Input() numericFormat: any;\n  @Input() observeChanges: boolean;\n  @Input() observeDOMVisibility: boolean;\n  @Input() outsideClickDeselects: boolean | ((event: Event) => boolean);\n  @Input() persistentState: boolean;\n  @Input() placeholder: any;\n  @Input() placeholderCellClassName: string;\n  @Input() preventOverflow: boolean | string;\n  @Input() readOnly: boolean;\n  @Input() readOnlyCellClassName: string;\n  @Input() renderAllRows: boolean;\n  @Input() renderer: string | (() => void);\n  @Input() rowHeaders: boolean | string[] | (() => string);\n  @Input() rowHeaderWidth: number | number[];\n  @Input() rowHeights: number | number[] | string | ((row: number) => number);\n  @Input() search: boolean;\n  @Input() selectOptions: string[] | number[];\n  @Input() skipColumnOnPaste: boolean;\n  @Input() sortByRelevance: boolean;\n  @Input() sortFunction: (sortOrder: boolean) => void;\n  @Input() sortIndicator: boolean;\n  @Input() source: any[] | (() => void);\n  @Input() startCols: number;\n  @Input() startRows: number;\n  @Input() stretchH: string;\n  @Input() strict: boolean;\n  @Input() tableClassName: string | string[];\n  @Input() tabMoves: object;\n  @Input() title: string;\n  @Input() trimDropdown: boolean;\n  @Input() trimWhitespace: boolean;\n  @Input() type: string;\n  @Input() uncheckedTemplate: boolean | string;\n  @Input() undo: boolean;\n  @Input() validator: string | RegExp | (() => void);\n  @Input() viewportColumnRenderingOffset: number | string;\n  @Input() viewportRowRenderingOffset: number | string;\n  @Input() visibleRows: number;\n  @Input() width: number| (() => number);\n  @Input() wordWrap: boolean;\n\n  constructor(private inj: Injector) {\n    this.parentComponent = this.inj.get(HotTableComponent);\n  }\n\n  ngOnInit() {\n    this.firstRun = false;\n    this.parentComponent.addColumn(this);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.firstRun) {\n      return;\n    }\n\n    this.parentComponent.onAfterColumnsChange();\n  }\n\n  ngOnDestroy() {\n    this.parentComponent.removeColumn(this);\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { HotTableComponent } from './hot-table.component';\nimport { HotColumnComponent } from './hot-column.component';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\n\n@NgModule({\n  declarations: [\n    HotTableComponent,\n    HotColumnComponent,\n  ],\n  exports: [\n    HotTableComponent,\n    HotColumnComponent,\n  ]\n})\nexport class HotTableModule {\n\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: HotTableModule,\n      providers: [\n        HotTableRegisterer\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "HotTableRegisterer",
    "prototype",
    "getInstance",
    "id",
    "registerInstance",
    "instance",
    "removeInstance",
    "AVAILABLE_OPTIONS",
    "AVAILABLE_HOOKS",
    "HotSettingsResolver",
    "this",
    "hooks",
    "mergeSettings",
    "component",
    "_this",
    "mergedSettings",
    "Object",
    "keys",
    "forEach",
    "key",
    "indexOf",
    "p1",
    "p2",
    "p3",
    "p4",
    "p5",
    "p6",
    "_ngZone",
    "run",
    "options",
    "option",
    "hook",
    "observers",
    "length",
    "emit",
    "hotInstance",
    "params",
    "prepareChanges",
    "changes",
    "result",
    "param",
    "hasOwnProperty",
    "currentValue",
    "HotTableComponent",
    "el",
    "_hotTableRegisterer",
    "_hotSettingsResolver",
    "columnsComponents",
    "afterBeginEditing",
    "EventEmitter",
    "afterCellMetaReset",
    "afterChange",
    "afterChangesObserved",
    "afterColumnMove",
    "afterColumnResize",
    "afterColumnSort",
    "afterContextMenuDefaultOptions",
    "afterContextMenuHide",
    "afterContextMenuShow",
    "afterCopy",
    "afterCopyLimit",
    "afterCreateCol",
    "afterCreateRow",
    "afterCut",
    "afterDeselect",
    "afterDestroy",
    "afterDocumentKeyDown",
    "afterGetCellMeta",
    "afterGetColHeader",
    "afterGetColumnHeaderRenderers",
    "afterGetRowHeader",
    "afterGetRowHeaderRenderers",
    "afterInit",
    "afterLanguageChange",
    "afterListen",
    "afterLoadData",
    "afterModifyTransformEnd",
    "afterModifyTransformStart",
    "afterMomentumScroll",
    "afterOnCellCornerDblClick",
    "afterOnCellCornerMouseDown",
    "afterOnCellMouseDown",
    "afterOnCellMouseOut",
    "afterOnCellMouseOver",
    "afterPaste",
    "afterPluginsInitialized",
    "afterRedo",
    "afterRemoveCellMeta",
    "afterRemoveCol",
    "afterRemoveRow",
    "afterRender",
    "afterRenderer",
    "afterRowMove",
    "afterRowResize",
    "afterScrollHorizontally",
    "afterScrollVertically",
    "afterSelection",
    "afterSelectionByProp",
    "afterSelectionEnd",
    "afterSelectionEndByProp",
    "afterSetCellMeta",
    "afterSetDataAtCell",
    "afterSetDataAtRowProp",
    "afterUndo",
    "afterUnlisten",
    "afterUpdateSettings",
    "afterValidate",
    "afterViewportColumnCalculatorOverride",
    "afterViewportRowCalculatorOverride",
    "beforeAutofill",
    "beforeAutofillInsidePopulate",
    "beforeCellAlignment",
    "beforeChange",
    "beforeChangeRender",
    "beforeColumnMove",
    "beforeColumnResize",
    "beforeColumnSort",
    "beforeContextMenuSetItems",
    "beforeCopy",
    "beforeCreateCol",
    "beforeCreateRow",
    "beforeCut",
    "beforeDrawBorders",
    "beforeGetCellMeta",
    "beforeInit",
    "beforeInitWalkontable",
    "beforeKeyDown",
    "beforeLanguageChange",
    "beforeOnCellMouseDown",
    "beforeOnCellMouseOut",
    "beforeOnCellMouseOver",
    "beforePaste",
    "beforeRedo",
    "beforeRemoveCellMeta",
    "beforeRemoveCol",
    "beforeRemoveRow",
    "beforeRender",
    "beforeRenderer",
    "beforeRowMove",
    "beforeRowResize",
    "beforeSetRangeEnd",
    "beforeSetRangeStart",
    "beforeStretchingColumnWidth",
    "beforeTouchScroll",
    "beforeUndo",
    "beforeValidate",
    "beforeValueRender",
    "construct",
    "init",
    "manualRowHeights",
    "modifyAutofillRange",
    "modifyCol",
    "modifyColHeader",
    "modifyColumnHeaderHeight",
    "modifyColWidth",
    "modifyCopyableRange",
    "modifyData",
    "modifyRow",
    "modifyRowData",
    "modifyRowHeader",
    "modifyRowHeaderWidth",
    "modifyRowHeight",
    "modifyTransformEnd",
    "modifyTransformStart",
    "persistentStateLoad",
    "persistentStateReset",
    "persistentStateSave",
    "skipLengthCache",
    "unmodifyCol",
    "ngOnInit",
    "container",
    "document",
    "createElement",
    "hotId",
    "ngAfterContentInit",
    "columns_1",
    "column",
    "push",
    "runOutsideAngular",
    "Handsontable",
    "ngOnChanges",
    "ngOnDestroy",
    "destroy",
    "updateHotTable",
    "newSettings",
    "onAfterColumnsChange",
    "columns_2",
    "newOptions",
    "columns",
    "onAfterColumnsNumberChange",
    "splice",
    "index",
    "decorators",
    "type",
    "Component",
    "args",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "providers",
    "ElementRef",
    "NgZone",
    "propDecorators",
    "settings",
    "Input",
    "allowEmpty",
    "allowHtml",
    "allowInsertColumn",
    "allowInsertRow",
    "allowInvalid",
    "allowRemoveColumn",
    "allowRemoveRow",
    "autoColumnSize",
    "autoComplete",
    "autoRowSize",
    "autoWrapCol",
    "autoWrapRow",
    "cell",
    "cells",
    "checkedTemplate",
    "className",
    "colHeaders",
    "columnHeaderHeight",
    "columnSorting",
    "colWidths",
    "commentedCellClassName",
    "comments",
    "contextMenu",
    "copyable",
    "copyPaste",
    "correctFormat",
    "currentColClassName",
    "currentHeaderClassName",
    "currentRowClassName",
    "customBorders",
    "data",
    "dataSchema",
    "dateFormat",
    "debug",
    "defaultDate",
    "disableVisualSelection",
    "dragToScroll",
    "editor",
    "enterBeginsEditing",
    "enterMoves",
    "fillHandle",
    "filter",
    "filteringCaseSensitive",
    "fixedColumnsLeft",
    "fixedRowsTop",
    "format",
    "fragmentSelection",
    "height",
    "invalidCellClassName",
    "label",
    "language",
    "manualColumnFreeze",
    "manualColumnMove",
    "manualColumnResize",
    "manualRowMove",
    "manualRowResize",
    "maxCols",
    "maxRows",
    "mergeCells",
    "minCols",
    "minRows",
    "minSpareCols",
    "minSpareRows",
    "multiSelect",
    "noWordWrapClassName",
    "numericFormat",
    "observeChanges",
    "observeDOMVisibility",
    "outsideClickDeselects",
    "pasteMode",
    "persistentState",
    "placeholder",
    "placeholderCellClassName",
    "preventOverflow",
    "readOnly",
    "readOnlyCellClassName",
    "renderAllRows",
    "renderer",
    "rowHeaders",
    "rowHeaderWidth",
    "rowHeights",
    "search",
    "selectOptions",
    "skipColumnOnPaste",
    "sortByRelevance",
    "sortFunction",
    "sortIndicator",
    "source",
    "startCols",
    "startRows",
    "stretchH",
    "strict",
    "tableClassName",
    "tabMoves",
    "title",
    "trimDropdown",
    "trimWhitespace",
    "uncheckedTemplate",
    "undo",
    "validator",
    "viewportColumnRenderingOffset",
    "viewportRowRenderingOffset",
    "visibleRows",
    "width",
    "wordWrap",
    "Output",
    "HotColumnComponent",
    "parentComponent",
    "inj",
    "get",
    "selector",
    "ctorParameters",
    "Injector",
    "HotTableModule",
    "NgModule",
    "declarations"
  ],
  "mappings": "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"
}
