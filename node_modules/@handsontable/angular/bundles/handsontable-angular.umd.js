(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('handsontable')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'handsontable'], factory) :
	(factory((global.Handsontable = global.Handsontable || {}, global.Handsontable.angular = {}),global.ng.core,global.Handsontable));
}(this, (function (exports,core,Handsontable) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var instances = new Map();
var HotTableRegisterer = /** @class */ (function () {
    function HotTableRegisterer() {
    }
    /**
     * @param {?} id
     * @return {?}
     */
    HotTableRegisterer.prototype.getInstance = function (id) {
        return instances.get(id);
    };
    /**
     * @param {?} id
     * @param {?} instance
     * @return {?}
     */
    HotTableRegisterer.prototype.registerInstance = function (id, instance) {
        instances.set(id, instance);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    HotTableRegisterer.prototype.removeInstance = function (id) {
        instances.delete(id);
    };
    return HotTableRegisterer;
}());
HotTableRegisterer.decorators = [
    { type: core.Injectable },
];
/** @nocollapse */
HotTableRegisterer.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AVAILABLE_OPTIONS = ['allowEmpty', 'allowHtml', 'allowInsertColumn', 'allowInsertRow',
    'allowInvalid', 'allowRemoveColumn', 'allowRemoveRow', 'autoColumnSize', 'autoComplete', 'autoRowSize',
    'autoWrapCol', 'autoWrapRow', 'cell', 'cells', 'checkedTemplate', 'className', 'colHeaders', 'columnHeaderHeight',
    'columns', 'columnSorting', 'colWidths', 'commentedCellClassName', 'comments', 'contextMenu', 'copyable',
    'copyPaste', 'correctFormat', 'currentColClassName', 'currentHeaderClassName', 'currentRowClassName',
    'customBorders', 'data', 'dataSchema', 'dateFormat', 'debug', 'defaultDate', 'disableVisualSelection',
    'dragToScroll', 'editor', 'enterBeginsEditing', 'enterMoves', 'fillHandle', 'filter', 'filteringCaseSensitive',
    'fixedColumnsLeft', 'fixedRowsTop', 'fragmentSelection', 'height', 'invalidCellClassName', 'label',
    'language', 'manualColumnFreeze', 'manualColumnMove', 'manualColumnResize', 'manualRowMove', 'manualRowResize',
    'maxCols', 'maxRows', 'mergeCells', 'minCols', 'minRows', 'minSpareCols', 'minSpareRows', 'multiSelect',
    'noWordWrapClassName', 'numericFormat', 'observeChanges', 'observeDOMVisibility', 'outsideClickDeselects',
    'persistentState', 'placeholder', 'placeholderCellClassName', 'preventOverflow', 'readOnly',
    'readOnlyCellClassName', 'renderAllRows', 'renderer', 'rowHeaders', 'rowHeaderWidth', 'rowHeights',
    'search', 'selectOptions', 'skipColumnOnPaste', 'sortByRelevance', 'sortFunction', 'sortIndicator',
    'source', 'startCols', 'startRows', 'stretchH', 'strict', 'tableClassName', 'tabMoves', 'title',
    'trimDropdown', 'trimWhitespace', 'type', 'uncheckedTemplate', 'undo', 'validator',
    'viewportColumnRenderingOffset', 'viewportRowRenderingOffset', 'visibleRows', 'width', 'wordWrap'];
var AVAILABLE_HOOKS = ['afterBeginEditing', 'afterCellMetaReset', 'afterChange',
    'afterChangesObserved', 'afterColumnMove', 'afterColumnResize', 'afterColumnSort',
    'afterContextMenuDefaultOptions', 'afterContextMenuHide', 'afterContextMenuShow', 'afterCopy',
    'afterCopyLimit', 'afterCreateCol', 'afterCreateRow', 'afterCut', 'afterDeselect', 'afterDestroy',
    'afterDocumentKeyDown', 'afterGetCellMeta', 'afterGetColHeader', 'afterGetColumnHeaderRenderers',
    'afterGetRowHeader', 'afterGetRowHeaderRenderers', 'afterInit', 'afterLanguageChange', 'afterListen',
    'afterLoadData', 'afterModifyTransformEnd', 'afterModifyTransformStart', 'afterMomentumScroll',
    'afterOnCellCornerDblClick', 'afterOnCellCornerMouseDown', 'afterOnCellMouseDown',
    'afterOnCellMouseOut', 'afterOnCellMouseOver', 'afterPaste', 'afterPluginsInitialized', 'afterRedo',
    'afterRemoveCellMeta', 'afterRemoveCol', 'afterRemoveRow', 'afterRender', 'afterRenderer',
    'afterRowMove', 'afterRowResize', 'afterScrollHorizontally', 'afterScrollVertically', 'afterSelection',
    'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'afterSetCellMeta',
    'afterSetDataAtCell', 'afterSetDataAtRowProp', 'afterUndo', 'afterUnlisten', 'afterUpdateSettings',
    'afterValidate', 'afterViewportColumnCalculatorOverride', 'afterViewportRowCalculatorOverride',
    'beforeAutofill', 'beforeAutofillInsidePopulate', 'beforeCellAlignment', 'beforeChange', 'beforeChangeRender',
    'beforeColumnMove', 'beforeColumnResize', 'beforeColumnSort', 'beforeContextMenuSetItems', 'beforeCopy',
    'beforeCreateCol', 'beforeCreateRow', 'beforeCut', 'beforeDrawBorders', 'beforeGetCellMeta', 'beforeInit',
    'beforeInitWalkontable', 'beforeKeyDown', 'beforeLanguageChange', 'beforeOnCellMouseDown', 'beforeOnCellMouseOut',
    'beforeOnCellMouseOver', 'beforePaste', 'beforeRedo', 'beforeRemoveCellMeta', 'beforeRemoveCol',
    'beforeRemoveRow', 'beforeRender', 'beforeRenderer', 'beforeRowMove', 'beforeRowResize', 'beforeSetRangeEnd',
    'beforeSetRangeEnd', 'beforeStretchingColumnWidth', 'beforeTouchScroll', 'beforeUndo', 'beforeValidate',
    'beforeValueRender', 'construct', 'init', 'manualRowHeights', 'modifyAutofillRange', 'modifyCol',
    'modifyColHeader', 'modifyColumnHeaderHeight', 'modifyColWidth', 'modifyCopyableRange', 'modifyData',
    'modifyRow', 'modifyRowData', 'modifyRowHeader', 'modifyRowHeaderWidth', 'modifyRowHeight', 'modifyTransformEnd',
    'modifyTransformStart', 'persistentStateLoad', 'persistentStateReset', 'persistentStateSave',
    'skipLengthCache', 'unmodifyCol', 'unmodifyRow'];
var HotSettingsResolver = /** @class */ (function () {
    function HotSettingsResolver() {
        this.hooks = AVAILABLE_HOOKS;
        this.options = AVAILABLE_OPTIONS;
    }
    /**
     * @param {?} component
     * @return {?}
     */
    HotSettingsResolver.prototype.mergeSettings = function (component) {
        var _this = this;
        var /** @type {?} */ mergedSettings = {};
        if (component['settings'] !== void 0) {
            Object.keys(component['settings']).forEach(function (key) {
                if (_this.hooks.indexOf(key) > -1) {
                    mergedSettings[key] = function (p1, p2, p3, p4, p5, p6) {
                        return component._ngZone.run(function () {
                            return component['settings'][key](p1, p2, p3, p4, p5, p6);
                        });
                    };
                }
                else {
                    mergedSettings[key] = component['settings'][key];
                }
            });
        }
        this.options.forEach(function (key) {
            var /** @type {?} */ option = component[key];
            if (option !== void 0) {
                mergedSettings[key] = option;
            }
        });
        this.hooks.forEach(function (key) {
            var /** @type {?} */ hook = component[key];
            if (hook && hook.observers.length > 0) {
                mergedSettings[key] = function (p1, p2, p3, p4, p5, p6) {
                    component._ngZone.run(function () {
                        component[key].emit({ hotInstance: component.hotInstance, params: [p1, p2, p3, p4, p5, p6] });
                    });
                };
            }
        });
        return mergedSettings;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    HotSettingsResolver.prototype.prepareChanges = function (changes) {
        var /** @type {?} */ result = {};
        var /** @type {?} */ parameters = Object.keys(changes);
        parameters.forEach(function (param) {
            if (changes.hasOwnProperty(param)) {
                result[param] = changes[param].currentValue;
            }
        });
        return result;
    };
    return HotSettingsResolver;
}());
HotSettingsResolver.decorators = [
    { type: core.Injectable },
];
/** @nocollapse */
HotSettingsResolver.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var HotTableComponent = /** @class */ (function () {
    /**
     * @param {?} el
     * @param {?} _ngZone
     * @param {?} _hotTableRegisterer
     * @param {?} _hotSettingsResolver
     */
    function HotTableComponent(el, _ngZone, _hotTableRegisterer, _hotSettingsResolver) {
        this.el = el;
        this._ngZone = _ngZone;
        this._hotTableRegisterer = _hotTableRegisterer;
        this._hotSettingsResolver = _hotSettingsResolver;
        this.columnsComponents = [];
        this.afterBeginEditing = new core.EventEmitter();
        this.afterCellMetaReset = new core.EventEmitter();
        this.afterChange = new core.EventEmitter();
        this.afterChangesObserved = new core.EventEmitter();
        this.afterColumnMove = new core.EventEmitter();
        this.afterColumnResize = new core.EventEmitter();
        this.afterColumnSort = new core.EventEmitter();
        this.afterContextMenuDefaultOptions = new core.EventEmitter();
        this.afterContextMenuHide = new core.EventEmitter();
        this.afterContextMenuShow = new core.EventEmitter();
        this.afterCopy = new core.EventEmitter();
        this.afterCopyLimit = new core.EventEmitter();
        this.afterCreateCol = new core.EventEmitter();
        this.afterCreateRow = new core.EventEmitter();
        this.afterCut = new core.EventEmitter();
        this.afterDeselect = new core.EventEmitter();
        this.afterDestroy = new core.EventEmitter();
        this.afterDocumentKeyDown = new core.EventEmitter();
        this.afterGetCellMeta = new core.EventEmitter();
        this.afterGetColHeader = new core.EventEmitter();
        this.afterGetColumnHeaderRenderers = new core.EventEmitter();
        this.afterGetRowHeader = new core.EventEmitter();
        this.afterGetRowHeaderRenderers = new core.EventEmitter();
        this.afterInit = new core.EventEmitter();
        this.afterLanguageChange = new core.EventEmitter();
        this.afterListen = new core.EventEmitter();
        this.afterLoadData = new core.EventEmitter();
        this.afterModifyTransformEnd = new core.EventEmitter();
        this.afterModifyTransformStart = new core.EventEmitter();
        this.afterMomentumScroll = new core.EventEmitter();
        this.afterOnCellCornerDblClick = new core.EventEmitter();
        this.afterOnCellCornerMouseDown = new core.EventEmitter();
        this.afterOnCellMouseDown = new core.EventEmitter();
        this.afterOnCellMouseOut = new core.EventEmitter();
        this.afterOnCellMouseOver = new core.EventEmitter();
        this.afterPaste = new core.EventEmitter();
        this.afterPluginsInitialized = new core.EventEmitter();
        this.afterRedo = new core.EventEmitter();
        this.afterRemoveCellMeta = new core.EventEmitter();
        this.afterRemoveCol = new core.EventEmitter();
        this.afterRemoveRow = new core.EventEmitter();
        this.afterRender = new core.EventEmitter();
        this.afterRenderer = new core.EventEmitter();
        this.afterRowMove = new core.EventEmitter();
        this.afterRowResize = new core.EventEmitter();
        this.afterScrollHorizontally = new core.EventEmitter();
        this.afterScrollVertically = new core.EventEmitter();
        this.afterSelection = new core.EventEmitter();
        this.afterSelectionByProp = new core.EventEmitter();
        this.afterSelectionEnd = new core.EventEmitter();
        this.afterSelectionEndByProp = new core.EventEmitter();
        this.afterSetCellMeta = new core.EventEmitter();
        this.afterSetDataAtCell = new core.EventEmitter();
        this.afterSetDataAtRowProp = new core.EventEmitter();
        this.afterUndo = new core.EventEmitter();
        this.afterUnlisten = new core.EventEmitter();
        this.afterUpdateSettings = new core.EventEmitter();
        this.afterValidate = new core.EventEmitter();
        this.afterViewportColumnCalculatorOverride = new core.EventEmitter();
        this.afterViewportRowCalculatorOverride = new core.EventEmitter();
        this.beforeAutofill = new core.EventEmitter();
        this.beforeAutofillInsidePopulate = new core.EventEmitter();
        this.beforeCellAlignment = new core.EventEmitter();
        this.beforeChange = new core.EventEmitter();
        this.beforeChangeRender = new core.EventEmitter();
        this.beforeColumnMove = new core.EventEmitter();
        this.beforeColumnResize = new core.EventEmitter();
        this.beforeColumnSort = new core.EventEmitter();
        this.beforeContextMenuSetItems = new core.EventEmitter();
        this.beforeCopy = new core.EventEmitter();
        this.beforeCreateCol = new core.EventEmitter();
        this.beforeCreateRow = new core.EventEmitter();
        this.beforeCut = new core.EventEmitter();
        this.beforeDrawBorders = new core.EventEmitter();
        this.beforeGetCellMeta = new core.EventEmitter();
        this.beforeInit = new core.EventEmitter();
        this.beforeInitWalkontable = new core.EventEmitter();
        this.beforeKeyDown = new core.EventEmitter();
        this.beforeLanguageChange = new core.EventEmitter();
        this.beforeOnCellMouseDown = new core.EventEmitter();
        this.beforeOnCellMouseOut = new core.EventEmitter();
        this.beforeOnCellMouseOver = new core.EventEmitter();
        this.beforePaste = new core.EventEmitter();
        this.beforeRedo = new core.EventEmitter();
        this.beforeRemoveCellMeta = new core.EventEmitter();
        this.beforeRemoveCol = new core.EventEmitter();
        this.beforeRemoveRow = new core.EventEmitter();
        this.beforeRender = new core.EventEmitter();
        this.beforeRenderer = new core.EventEmitter();
        this.beforeRowMove = new core.EventEmitter();
        this.beforeRowResize = new core.EventEmitter();
        this.beforeSetRangeEnd = new core.EventEmitter();
        this.beforeSetRangeStart = new core.EventEmitter();
        this.beforeStretchingColumnWidth = new core.EventEmitter();
        this.beforeTouchScroll = new core.EventEmitter();
        this.beforeUndo = new core.EventEmitter();
        this.beforeValidate = new core.EventEmitter();
        this.beforeValueRender = new core.EventEmitter();
        this.construct = new core.EventEmitter();
        this.init = new core.EventEmitter();
        this.manualRowHeights = new core.EventEmitter();
        this.modifyAutofillRange = new core.EventEmitter();
        this.modifyCol = new core.EventEmitter();
        this.modifyColHeader = new core.EventEmitter();
        this.modifyColumnHeaderHeight = new core.EventEmitter();
        this.modifyColWidth = new core.EventEmitter();
        this.modifyCopyableRange = new core.EventEmitter();
        this.modifyData = new core.EventEmitter();
        this.modifyRow = new core.EventEmitter();
        this.modifyRowData = new core.EventEmitter();
        this.modifyRowHeader = new core.EventEmitter();
        this.modifyRowHeaderWidth = new core.EventEmitter();
        this.modifyRowHeight = new core.EventEmitter();
        this.modifyTransformEnd = new core.EventEmitter();
        this.modifyTransformStart = new core.EventEmitter();
        this.persistentStateLoad = new core.EventEmitter();
        this.persistentStateReset = new core.EventEmitter();
        this.persistentStateSave = new core.EventEmitter();
        this.skipLengthCache = new core.EventEmitter();
        this.unmodifyCol = new core.EventEmitter();
        this.unmodifyRow = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    HotTableComponent.prototype.ngOnInit = function () {
        this.container = document.createElement('div');
        if (this.hotId) {
            this.container.id = this.hotId;
        }
        this.el.nativeElement.appendChild(this.container);
    };
    /**
     * @return {?}
     */
    HotTableComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        var /** @type {?} */ options = this._hotSettingsResolver.mergeSettings(this);
        if (this.columnsComponents.length > 0) {
            var /** @type {?} */ columns_1 = [];
            this.columnsComponents.forEach(function (column) {
                columns_1.push(_this._hotSettingsResolver.mergeSettings(column));
            });
            options['columns'] = columns_1;
        }
        this._ngZone.runOutsideAngular(function () {
            _this.hotInstance = new Handsontable(_this.container, options);
        });
        if (this.hotId) {
            this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    HotTableComponent.prototype.ngOnChanges = function (changes) {
        if (this.hotInstance === void 0) {
            return;
        }
        var /** @type {?} */ newOptions = this._hotSettingsResolver.prepareChanges(changes);
        this.updateHotTable(newOptions);
    };
    /**
     * @return {?}
     */
    HotTableComponent.prototype.ngOnDestroy = function () {
        this.hotInstance.destroy();
        if (this.hotId) {
            this._hotTableRegisterer.removeInstance(this.hotId);
        }
        this.el.nativeElement.removeChild(this.container);
        this.container = void 0;
    };
    /**
     * @param {?} newSettings
     * @return {?}
     */
    HotTableComponent.prototype.updateHotTable = function (newSettings) {
        if (!this.hotInstance) {
            return;
        }
        this.hotInstance.updateSettings(newSettings, false);
    };
    /**
     * @return {?}
     */
    HotTableComponent.prototype.onAfterColumnsChange = function () {
        var _this = this;
        if (this.columnsComponents === void 0) {
            return;
        }
        if (this.columnsComponents.length > 0) {
            var /** @type {?} */ columns_2 = [];
            this.columnsComponents.forEach(function (column) {
                columns_2.push(_this._hotSettingsResolver.mergeSettings(column));
            });
            var /** @type {?} */ newOptions = {
                columns: columns_2
            };
            this.updateHotTable(newOptions);
        }
    };
    /**
     * @return {?}
     */
    HotTableComponent.prototype.onAfterColumnsNumberChange = function () {
        var _this = this;
        var /** @type {?} */ columns = [];
        if (this.columnsComponents.length > 0) {
            this.columnsComponents.forEach(function (column) {
                columns.push(_this._hotSettingsResolver.mergeSettings(column));
            });
        }
        this.updateHotTable({ columns: columns });
    };
    /**
     * @param {?} column
     * @return {?}
     */
    HotTableComponent.prototype.addColumn = function (column) {
        this.columnsComponents.push(column);
        this.onAfterColumnsNumberChange();
    };
    /**
     * @param {?} column
     * @return {?}
     */
    HotTableComponent.prototype.removeColumn = function (column) {
        var /** @type {?} */ index = this.columnsComponents.indexOf(column);
        this.columnsComponents.splice(index, 1);
        this.onAfterColumnsNumberChange();
    };
    return HotTableComponent;
}());
HotTableComponent.decorators = [
    { type: core.Component, args: [{
                // tslint:disable-next-line
                selector: 'hot-table',
                template: '',
                encapsulation: core.ViewEncapsulation.None,
                providers: [HotTableRegisterer, HotSettingsResolver],
            },] },
];
/** @nocollapse */
HotTableComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.NgZone, },
    { type: HotTableRegisterer, },
    { type: HotSettingsResolver, },
]; };
HotTableComponent.propDecorators = {
    "settings": [{ type: core.Input },],
    "hotId": [{ type: core.Input },],
    "allowEmpty": [{ type: core.Input },],
    "allowHtml": [{ type: core.Input },],
    "allowInsertColumn": [{ type: core.Input },],
    "allowInsertRow": [{ type: core.Input },],
    "allowInvalid": [{ type: core.Input },],
    "allowRemoveColumn": [{ type: core.Input },],
    "allowRemoveRow": [{ type: core.Input },],
    "autoColumnSize": [{ type: core.Input },],
    "autoComplete": [{ type: core.Input },],
    "autoRowSize": [{ type: core.Input },],
    "autoWrapCol": [{ type: core.Input },],
    "autoWrapRow": [{ type: core.Input },],
    "cell": [{ type: core.Input },],
    "cells": [{ type: core.Input },],
    "checkedTemplate": [{ type: core.Input },],
    "className": [{ type: core.Input },],
    "colHeaders": [{ type: core.Input },],
    "columnHeaderHeight": [{ type: core.Input },],
    "columns": [{ type: core.Input },],
    "columnSorting": [{ type: core.Input },],
    "colWidths": [{ type: core.Input },],
    "commentedCellClassName": [{ type: core.Input },],
    "comments": [{ type: core.Input },],
    "contextMenu": [{ type: core.Input },],
    "copyable": [{ type: core.Input },],
    "copyPaste": [{ type: core.Input },],
    "correctFormat": [{ type: core.Input },],
    "currentColClassName": [{ type: core.Input },],
    "currentHeaderClassName": [{ type: core.Input },],
    "currentRowClassName": [{ type: core.Input },],
    "customBorders": [{ type: core.Input },],
    "data": [{ type: core.Input },],
    "dataSchema": [{ type: core.Input },],
    "dateFormat": [{ type: core.Input },],
    "debug": [{ type: core.Input },],
    "defaultDate": [{ type: core.Input },],
    "disableVisualSelection": [{ type: core.Input },],
    "dragToScroll": [{ type: core.Input },],
    "editor": [{ type: core.Input },],
    "enterBeginsEditing": [{ type: core.Input },],
    "enterMoves": [{ type: core.Input },],
    "fillHandle": [{ type: core.Input },],
    "filter": [{ type: core.Input },],
    "filteringCaseSensitive": [{ type: core.Input },],
    "fixedColumnsLeft": [{ type: core.Input },],
    "fixedRowsTop": [{ type: core.Input },],
    "format": [{ type: core.Input },],
    "fragmentSelection": [{ type: core.Input },],
    "height": [{ type: core.Input },],
    "invalidCellClassName": [{ type: core.Input },],
    "label": [{ type: core.Input },],
    "language": [{ type: core.Input },],
    "manualColumnFreeze": [{ type: core.Input },],
    "manualColumnMove": [{ type: core.Input },],
    "manualColumnResize": [{ type: core.Input },],
    "manualRowMove": [{ type: core.Input },],
    "manualRowResize": [{ type: core.Input },],
    "maxCols": [{ type: core.Input },],
    "maxRows": [{ type: core.Input },],
    "mergeCells": [{ type: core.Input },],
    "minCols": [{ type: core.Input },],
    "minRows": [{ type: core.Input },],
    "minSpareCols": [{ type: core.Input },],
    "minSpareRows": [{ type: core.Input },],
    "multiSelect": [{ type: core.Input },],
    "noWordWrapClassName": [{ type: core.Input },],
    "numericFormat": [{ type: core.Input },],
    "observeChanges": [{ type: core.Input },],
    "observeDOMVisibility": [{ type: core.Input },],
    "outsideClickDeselects": [{ type: core.Input },],
    "pasteMode": [{ type: core.Input },],
    "persistentState": [{ type: core.Input },],
    "placeholder": [{ type: core.Input },],
    "placeholderCellClassName": [{ type: core.Input },],
    "preventOverflow": [{ type: core.Input },],
    "readOnly": [{ type: core.Input },],
    "readOnlyCellClassName": [{ type: core.Input },],
    "renderAllRows": [{ type: core.Input },],
    "renderer": [{ type: core.Input },],
    "rowHeaders": [{ type: core.Input },],
    "rowHeaderWidth": [{ type: core.Input },],
    "rowHeights": [{ type: core.Input },],
    "search": [{ type: core.Input },],
    "selectOptions": [{ type: core.Input },],
    "skipColumnOnPaste": [{ type: core.Input },],
    "sortByRelevance": [{ type: core.Input },],
    "sortFunction": [{ type: core.Input },],
    "sortIndicator": [{ type: core.Input },],
    "source": [{ type: core.Input },],
    "startCols": [{ type: core.Input },],
    "startRows": [{ type: core.Input },],
    "stretchH": [{ type: core.Input },],
    "strict": [{ type: core.Input },],
    "tableClassName": [{ type: core.Input },],
    "tabMoves": [{ type: core.Input },],
    "title": [{ type: core.Input },],
    "trimDropdown": [{ type: core.Input },],
    "trimWhitespace": [{ type: core.Input },],
    "type": [{ type: core.Input },],
    "uncheckedTemplate": [{ type: core.Input },],
    "undo": [{ type: core.Input },],
    "validator": [{ type: core.Input },],
    "viewportColumnRenderingOffset": [{ type: core.Input },],
    "viewportRowRenderingOffset": [{ type: core.Input },],
    "visibleRows": [{ type: core.Input },],
    "width": [{ type: core.Input },],
    "wordWrap": [{ type: core.Input },],
    "afterBeginEditing": [{ type: core.Output },],
    "afterCellMetaReset": [{ type: core.Output },],
    "afterChange": [{ type: core.Output },],
    "afterChangesObserved": [{ type: core.Output },],
    "afterColumnMove": [{ type: core.Output },],
    "afterColumnResize": [{ type: core.Output },],
    "afterColumnSort": [{ type: core.Output },],
    "afterContextMenuDefaultOptions": [{ type: core.Output },],
    "afterContextMenuHide": [{ type: core.Output },],
    "afterContextMenuShow": [{ type: core.Output },],
    "afterCopy": [{ type: core.Output },],
    "afterCopyLimit": [{ type: core.Output },],
    "afterCreateCol": [{ type: core.Output },],
    "afterCreateRow": [{ type: core.Output },],
    "afterCut": [{ type: core.Output },],
    "afterDeselect": [{ type: core.Output },],
    "afterDestroy": [{ type: core.Output },],
    "afterDocumentKeyDown": [{ type: core.Output },],
    "afterGetCellMeta": [{ type: core.Output },],
    "afterGetColHeader": [{ type: core.Output },],
    "afterGetColumnHeaderRenderers": [{ type: core.Output },],
    "afterGetRowHeader": [{ type: core.Output },],
    "afterGetRowHeaderRenderers": [{ type: core.Output },],
    "afterInit": [{ type: core.Output },],
    "afterLanguageChange": [{ type: core.Output },],
    "afterListen": [{ type: core.Output },],
    "afterLoadData": [{ type: core.Output },],
    "afterModifyTransformEnd": [{ type: core.Output },],
    "afterModifyTransformStart": [{ type: core.Output },],
    "afterMomentumScroll": [{ type: core.Output },],
    "afterOnCellCornerDblClick": [{ type: core.Output },],
    "afterOnCellCornerMouseDown": [{ type: core.Output },],
    "afterOnCellMouseDown": [{ type: core.Output },],
    "afterOnCellMouseOut": [{ type: core.Output },],
    "afterOnCellMouseOver": [{ type: core.Output },],
    "afterPaste": [{ type: core.Output },],
    "afterPluginsInitialized": [{ type: core.Output },],
    "afterRedo": [{ type: core.Output },],
    "afterRemoveCellMeta": [{ type: core.Output },],
    "afterRemoveCol": [{ type: core.Output },],
    "afterRemoveRow": [{ type: core.Output },],
    "afterRender": [{ type: core.Output },],
    "afterRenderer": [{ type: core.Output },],
    "afterRowMove": [{ type: core.Output },],
    "afterRowResize": [{ type: core.Output },],
    "afterScrollHorizontally": [{ type: core.Output },],
    "afterScrollVertically": [{ type: core.Output },],
    "afterSelection": [{ type: core.Output },],
    "afterSelectionByProp": [{ type: core.Output },],
    "afterSelectionEnd": [{ type: core.Output },],
    "afterSelectionEndByProp": [{ type: core.Output },],
    "afterSetCellMeta": [{ type: core.Output },],
    "afterSetDataAtCell": [{ type: core.Output },],
    "afterSetDataAtRowProp": [{ type: core.Output },],
    "afterUndo": [{ type: core.Output },],
    "afterUnlisten": [{ type: core.Output },],
    "afterUpdateSettings": [{ type: core.Output },],
    "afterValidate": [{ type: core.Output },],
    "afterViewportColumnCalculatorOverride": [{ type: core.Output },],
    "afterViewportRowCalculatorOverride": [{ type: core.Output },],
    "beforeAutofill": [{ type: core.Output },],
    "beforeAutofillInsidePopulate": [{ type: core.Output },],
    "beforeCellAlignment": [{ type: core.Output },],
    "beforeChange": [{ type: core.Output },],
    "beforeChangeRender": [{ type: core.Output },],
    "beforeColumnMove": [{ type: core.Output },],
    "beforeColumnResize": [{ type: core.Output },],
    "beforeColumnSort": [{ type: core.Output },],
    "beforeContextMenuSetItems": [{ type: core.Output },],
    "beforeCopy": [{ type: core.Output },],
    "beforeCreateCol": [{ type: core.Output },],
    "beforeCreateRow": [{ type: core.Output },],
    "beforeCut": [{ type: core.Output },],
    "beforeDrawBorders": [{ type: core.Output },],
    "beforeGetCellMeta": [{ type: core.Output },],
    "beforeInit": [{ type: core.Output },],
    "beforeInitWalkontable": [{ type: core.Output },],
    "beforeKeyDown": [{ type: core.Output },],
    "beforeLanguageChange": [{ type: core.Output },],
    "beforeOnCellMouseDown": [{ type: core.Output },],
    "beforeOnCellMouseOut": [{ type: core.Output },],
    "beforeOnCellMouseOver": [{ type: core.Output },],
    "beforePaste": [{ type: core.Output },],
    "beforeRedo": [{ type: core.Output },],
    "beforeRemoveCellMeta": [{ type: core.Output },],
    "beforeRemoveCol": [{ type: core.Output },],
    "beforeRemoveRow": [{ type: core.Output },],
    "beforeRender": [{ type: core.Output },],
    "beforeRenderer": [{ type: core.Output },],
    "beforeRowMove": [{ type: core.Output },],
    "beforeRowResize": [{ type: core.Output },],
    "beforeSetRangeEnd": [{ type: core.Output },],
    "beforeSetRangeStart": [{ type: core.Output },],
    "beforeStretchingColumnWidth": [{ type: core.Output },],
    "beforeTouchScroll": [{ type: core.Output },],
    "beforeUndo": [{ type: core.Output },],
    "beforeValidate": [{ type: core.Output },],
    "beforeValueRender": [{ type: core.Output },],
    "construct": [{ type: core.Output },],
    "init": [{ type: core.Output },],
    "manualRowHeights": [{ type: core.Output },],
    "modifyAutofillRange": [{ type: core.Output },],
    "modifyCol": [{ type: core.Output },],
    "modifyColHeader": [{ type: core.Output },],
    "modifyColumnHeaderHeight": [{ type: core.Output },],
    "modifyColWidth": [{ type: core.Output },],
    "modifyCopyableRange": [{ type: core.Output },],
    "modifyData": [{ type: core.Output },],
    "modifyRow": [{ type: core.Output },],
    "modifyRowData": [{ type: core.Output },],
    "modifyRowHeader": [{ type: core.Output },],
    "modifyRowHeaderWidth": [{ type: core.Output },],
    "modifyRowHeight": [{ type: core.Output },],
    "modifyTransformEnd": [{ type: core.Output },],
    "modifyTransformStart": [{ type: core.Output },],
    "persistentStateLoad": [{ type: core.Output },],
    "persistentStateReset": [{ type: core.Output },],
    "persistentStateSave": [{ type: core.Output },],
    "skipLengthCache": [{ type: core.Output },],
    "unmodifyCol": [{ type: core.Output },],
    "unmodifyRow": [{ type: core.Output },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var HotColumnComponent = /** @class */ (function () {
    /**
     * @param {?} inj
     */
    function HotColumnComponent(inj) {
        this.inj = inj;
        this.firstRun = true;
        this.parentComponent = this.inj.get(HotTableComponent);
    }
    /**
     * @return {?}
     */
    HotColumnComponent.prototype.ngOnInit = function () {
        this.firstRun = false;
        this.parentComponent.addColumn(this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    HotColumnComponent.prototype.ngOnChanges = function (changes) {
        if (this.firstRun) {
            return;
        }
        this.parentComponent.onAfterColumnsChange();
    };
    /**
     * @return {?}
     */
    HotColumnComponent.prototype.ngOnDestroy = function () {
        this.parentComponent.removeColumn(this);
    };
    return HotColumnComponent;
}());
HotColumnComponent.decorators = [
    { type: core.Component, args: [{
                // tslint:disable-next-line
                selector: 'hot-column',
                template: '',
            },] },
];
/** @nocollapse */
HotColumnComponent.ctorParameters = function () { return [
    { type: core.Injector, },
]; };
HotColumnComponent.propDecorators = {
    "allowEmpty": [{ type: core.Input },],
    "allowHtml": [{ type: core.Input },],
    "allowInsertColumn": [{ type: core.Input },],
    "allowInsertRow": [{ type: core.Input },],
    "allowInvalid": [{ type: core.Input },],
    "allowRemoveColumn": [{ type: core.Input },],
    "allowRemoveRow": [{ type: core.Input },],
    "autoColumnSize": [{ type: core.Input },],
    "autoComplete": [{ type: core.Input },],
    "autoRowSize": [{ type: core.Input },],
    "autoWrapCol": [{ type: core.Input },],
    "autoWrapRow": [{ type: core.Input },],
    "cell": [{ type: core.Input },],
    "cells": [{ type: core.Input },],
    "checkedTemplate": [{ type: core.Input },],
    "className": [{ type: core.Input },],
    "colHeaders": [{ type: core.Input },],
    "columnHeaderHeight": [{ type: core.Input },],
    "columns": [{ type: core.Input },],
    "columnSorting": [{ type: core.Input },],
    "colWidths": [{ type: core.Input },],
    "commentedCellClassName": [{ type: core.Input },],
    "comments": [{ type: core.Input },],
    "contextMenu": [{ type: core.Input },],
    "copyable": [{ type: core.Input },],
    "copyPaste": [{ type: core.Input },],
    "correctFormat": [{ type: core.Input },],
    "currentColClassName": [{ type: core.Input },],
    "currentHeaderClassName": [{ type: core.Input },],
    "currentRowClassName": [{ type: core.Input },],
    "customBorders": [{ type: core.Input },],
    "data": [{ type: core.Input },],
    "dataSchema": [{ type: core.Input },],
    "dateFormat": [{ type: core.Input },],
    "debug": [{ type: core.Input },],
    "defaultDate": [{ type: core.Input },],
    "disableVisualSelection": [{ type: core.Input },],
    "dragToScroll": [{ type: core.Input },],
    "editor": [{ type: core.Input },],
    "enterBeginsEditing": [{ type: core.Input },],
    "enterMoves": [{ type: core.Input },],
    "fillHandle": [{ type: core.Input },],
    "filter": [{ type: core.Input },],
    "filteringCaseSensitive": [{ type: core.Input },],
    "fixedColumnsLeft": [{ type: core.Input },],
    "fixedRowsTop": [{ type: core.Input },],
    "fragmentSelection": [{ type: core.Input },],
    "height": [{ type: core.Input },],
    "invalidCellClassName": [{ type: core.Input },],
    "label": [{ type: core.Input },],
    "language": [{ type: core.Input },],
    "manualColumnFreeze": [{ type: core.Input },],
    "manualColumnMove": [{ type: core.Input },],
    "manualColumnResize": [{ type: core.Input },],
    "manualRowMove": [{ type: core.Input },],
    "manualRowResize": [{ type: core.Input },],
    "maxCols": [{ type: core.Input },],
    "maxRows": [{ type: core.Input },],
    "mergeCells": [{ type: core.Input },],
    "minCols": [{ type: core.Input },],
    "minRows": [{ type: core.Input },],
    "minSpareCols": [{ type: core.Input },],
    "minSpareRows": [{ type: core.Input },],
    "multiSelect": [{ type: core.Input },],
    "noWordWrapClassName": [{ type: core.Input },],
    "numericFormat": [{ type: core.Input },],
    "observeChanges": [{ type: core.Input },],
    "observeDOMVisibility": [{ type: core.Input },],
    "outsideClickDeselects": [{ type: core.Input },],
    "persistentState": [{ type: core.Input },],
    "placeholder": [{ type: core.Input },],
    "placeholderCellClassName": [{ type: core.Input },],
    "preventOverflow": [{ type: core.Input },],
    "readOnly": [{ type: core.Input },],
    "readOnlyCellClassName": [{ type: core.Input },],
    "renderAllRows": [{ type: core.Input },],
    "renderer": [{ type: core.Input },],
    "rowHeaders": [{ type: core.Input },],
    "rowHeaderWidth": [{ type: core.Input },],
    "rowHeights": [{ type: core.Input },],
    "search": [{ type: core.Input },],
    "selectOptions": [{ type: core.Input },],
    "skipColumnOnPaste": [{ type: core.Input },],
    "sortByRelevance": [{ type: core.Input },],
    "sortFunction": [{ type: core.Input },],
    "sortIndicator": [{ type: core.Input },],
    "source": [{ type: core.Input },],
    "startCols": [{ type: core.Input },],
    "startRows": [{ type: core.Input },],
    "stretchH": [{ type: core.Input },],
    "strict": [{ type: core.Input },],
    "tableClassName": [{ type: core.Input },],
    "tabMoves": [{ type: core.Input },],
    "title": [{ type: core.Input },],
    "trimDropdown": [{ type: core.Input },],
    "trimWhitespace": [{ type: core.Input },],
    "type": [{ type: core.Input },],
    "uncheckedTemplate": [{ type: core.Input },],
    "undo": [{ type: core.Input },],
    "validator": [{ type: core.Input },],
    "viewportColumnRenderingOffset": [{ type: core.Input },],
    "viewportRowRenderingOffset": [{ type: core.Input },],
    "visibleRows": [{ type: core.Input },],
    "width": [{ type: core.Input },],
    "wordWrap": [{ type: core.Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var HotTableModule = /** @class */ (function () {
    function HotTableModule() {
    }
    /**
     * @return {?}
     */
    HotTableModule.forRoot = function () {
        return {
            ngModule: HotTableModule,
            providers: [
                HotTableRegisterer
            ]
        };
    };
    return HotTableModule;
}());
HotTableModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    HotTableComponent,
                    HotColumnComponent,
                ],
                exports: [
                    HotTableComponent,
                    HotColumnComponent,
                ]
            },] },
];
/** @nocollapse */
HotTableModule.ctorParameters = function () { return []; };

exports.HotTableComponent = HotTableComponent;
exports.HotColumnComponent = HotColumnComponent;
exports.HotTableRegisterer = HotTableRegisterer;
exports.HotSettingsResolver = HotSettingsResolver;
exports.HotTableModule = HotTableModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=handsontable-angular.umd.js.map
