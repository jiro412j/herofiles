import { ElementRef, NgZone, AfterContentInit, OnChanges, OnDestroy, OnInit, SimpleChanges, EventEmitter } from '@angular/core';
import { HotTableRegisterer } from './hot-table-registerer.service';
import { HotSettingsResolver } from './hot-settings-resolver.service';
import { HotColumnComponent } from './hot-column.component';
export declare class HotTableComponent implements AfterContentInit, OnChanges, OnDestroy, OnInit {
    private el;
    private _ngZone;
    private _hotTableRegisterer;
    private _hotSettingsResolver;
    private hotInstance;
    private container;
    private columnsComponents;
    settings: object;
    hotId: string;
    allowEmpty: boolean;
    allowHtml: boolean;
    allowInsertColumn: boolean;
    allowInsertRow: boolean;
    allowInvalid: boolean;
    allowRemoveColumn: boolean;
    allowRemoveRow: boolean;
    autoColumnSize: boolean | object;
    autoComplete: any[];
    autoRowSize: boolean | object;
    autoWrapCol: boolean;
    autoWrapRow: boolean;
    cell: any[];
    cells: (row: number, column: number, prop: object) => object;
    checkedTemplate: boolean | string;
    className: string | string[];
    colHeaders: boolean | string[] | ((column: number) => string);
    columnHeaderHeight: number | number[];
    columns: object[] | ((column: number) => object);
    columnSorting: boolean | object;
    colWidths: number | number[] | string | ((column: number) => number);
    commentedCellClassName: string;
    comments: boolean | object[];
    contextMenu: boolean | object | object[];
    copyable: boolean;
    copyPaste: boolean | object;
    correctFormat: boolean;
    currentColClassName: string;
    currentHeaderClassName: string;
    currentRowClassName: string;
    customBorders: boolean | object[];
    data: any[];
    dataSchema: object;
    dateFormat: string;
    debug: boolean;
    defaultDate: string;
    disableVisualSelection: boolean | string | string[];
    dragToScroll: boolean;
    editor: boolean | string | (() => void);
    enterBeginsEditing: boolean;
    enterMoves: object | (() => void);
    fillHandle: boolean | string | object;
    filter: boolean;
    filteringCaseSensitive: boolean;
    fixedColumnsLeft: number;
    fixedRowsTop: number;
    format: string;
    fragmentSelection: boolean | string;
    height: number | (() => number);
    invalidCellClassName: string;
    label: object;
    language: string;
    manualColumnFreeze: boolean;
    manualColumnMove: boolean | number[];
    manualColumnResize: boolean | number[];
    manualRowMove: boolean | number[];
    manualRowResize: boolean | number[];
    maxCols: number;
    maxRows: number;
    mergeCells: boolean | object[];
    minCols: number;
    minRows: number;
    minSpareCols: number;
    minSpareRows: number;
    multiSelect: boolean;
    noWordWrapClassName: string;
    numericFormat: any;
    observeChanges: boolean;
    observeDOMVisibility: boolean;
    outsideClickDeselects: boolean | ((event: Event) => boolean);
    pasteMode: string;
    persistentState: boolean;
    placeholder: any;
    placeholderCellClassName: string;
    preventOverflow: boolean | string;
    readOnly: boolean;
    readOnlyCellClassName: string;
    renderAllRows: boolean;
    renderer: string | (() => void);
    rowHeaders: boolean | string[] | (() => string);
    rowHeaderWidth: number | number[];
    rowHeights: number | number[] | string | ((row: number) => number);
    search: boolean;
    selectOptions: string[] | number[];
    skipColumnOnPaste: boolean;
    sortByRelevance: boolean;
    sortFunction: (sortOrder: boolean) => void;
    sortIndicator: boolean;
    source: any[] | (() => void);
    startCols: number;
    startRows: number;
    stretchH: string;
    strict: boolean;
    tableClassName: string | string[];
    tabMoves: object;
    title: string;
    trimDropdown: boolean;
    trimWhitespace: boolean;
    type: string;
    uncheckedTemplate: boolean | string;
    undo: boolean;
    validator: string | RegExp | (() => void);
    viewportColumnRenderingOffset: number | string;
    viewportRowRenderingOffset: number | string;
    visibleRows: number;
    width: number | (() => number);
    wordWrap: boolean;
    afterBeginEditing: EventEmitter<any[]>;
    afterCellMetaReset: EventEmitter<any[]>;
    afterChange: EventEmitter<any[]>;
    afterChangesObserved: EventEmitter<any[]>;
    afterColumnMove: EventEmitter<any[]>;
    afterColumnResize: EventEmitter<any[]>;
    afterColumnSort: EventEmitter<any[]>;
    afterContextMenuDefaultOptions: EventEmitter<any[]>;
    afterContextMenuHide: EventEmitter<any[]>;
    afterContextMenuShow: EventEmitter<any[]>;
    afterCopy: EventEmitter<any[]>;
    afterCopyLimit: EventEmitter<any[]>;
    afterCreateCol: EventEmitter<any[]>;
    afterCreateRow: EventEmitter<any[]>;
    afterCut: EventEmitter<any[]>;
    afterDeselect: EventEmitter<any[]>;
    afterDestroy: EventEmitter<any[]>;
    afterDocumentKeyDown: EventEmitter<any[]>;
    afterGetCellMeta: EventEmitter<any[]>;
    afterGetColHeader: EventEmitter<any[]>;
    afterGetColumnHeaderRenderers: EventEmitter<any[]>;
    afterGetRowHeader: EventEmitter<any[]>;
    afterGetRowHeaderRenderers: EventEmitter<any[]>;
    afterInit: EventEmitter<any[]>;
    afterLanguageChange: EventEmitter<any[]>;
    afterListen: EventEmitter<any[]>;
    afterLoadData: EventEmitter<any[]>;
    afterModifyTransformEnd: EventEmitter<any[]>;
    afterModifyTransformStart: EventEmitter<any[]>;
    afterMomentumScroll: EventEmitter<any[]>;
    afterOnCellCornerDblClick: EventEmitter<any[]>;
    afterOnCellCornerMouseDown: EventEmitter<any[]>;
    afterOnCellMouseDown: EventEmitter<any[]>;
    afterOnCellMouseOut: EventEmitter<any[]>;
    afterOnCellMouseOver: EventEmitter<any[]>;
    afterPaste: EventEmitter<any[]>;
    afterPluginsInitialized: EventEmitter<any[]>;
    afterRedo: EventEmitter<any[]>;
    afterRemoveCellMeta: EventEmitter<any[]>;
    afterRemoveCol: EventEmitter<any[]>;
    afterRemoveRow: EventEmitter<any[]>;
    afterRender: EventEmitter<any[]>;
    afterRenderer: EventEmitter<any[]>;
    afterRowMove: EventEmitter<any[]>;
    afterRowResize: EventEmitter<any[]>;
    afterScrollHorizontally: EventEmitter<any[]>;
    afterScrollVertically: EventEmitter<any[]>;
    afterSelection: EventEmitter<any[]>;
    afterSelectionByProp: EventEmitter<any[]>;
    afterSelectionEnd: EventEmitter<any[]>;
    afterSelectionEndByProp: EventEmitter<any[]>;
    afterSetCellMeta: EventEmitter<any[]>;
    afterSetDataAtCell: EventEmitter<any[]>;
    afterSetDataAtRowProp: EventEmitter<any[]>;
    afterUndo: EventEmitter<any[]>;
    afterUnlisten: EventEmitter<any[]>;
    afterUpdateSettings: EventEmitter<any[]>;
    afterValidate: EventEmitter<any[]>;
    afterViewportColumnCalculatorOverride: EventEmitter<any[]>;
    afterViewportRowCalculatorOverride: EventEmitter<any[]>;
    beforeAutofill: EventEmitter<any[]>;
    beforeAutofillInsidePopulate: EventEmitter<any[]>;
    beforeCellAlignment: EventEmitter<any[]>;
    beforeChange: EventEmitter<any[]>;
    beforeChangeRender: EventEmitter<any[]>;
    beforeColumnMove: EventEmitter<any[]>;
    beforeColumnResize: EventEmitter<any[]>;
    beforeColumnSort: EventEmitter<any[]>;
    beforeContextMenuSetItems: EventEmitter<any[]>;
    beforeCopy: EventEmitter<any[]>;
    beforeCreateCol: EventEmitter<any[]>;
    beforeCreateRow: EventEmitter<any[]>;
    beforeCut: EventEmitter<any[]>;
    beforeDrawBorders: EventEmitter<any[]>;
    beforeGetCellMeta: EventEmitter<any[]>;
    beforeInit: EventEmitter<any[]>;
    beforeInitWalkontable: EventEmitter<any[]>;
    beforeKeyDown: EventEmitter<any[]>;
    beforeLanguageChange: EventEmitter<any[]>;
    beforeOnCellMouseDown: EventEmitter<any[]>;
    beforeOnCellMouseOut: EventEmitter<any[]>;
    beforeOnCellMouseOver: EventEmitter<any[]>;
    beforePaste: EventEmitter<any[]>;
    beforeRedo: EventEmitter<any[]>;
    beforeRemoveCellMeta: EventEmitter<any[]>;
    beforeRemoveCol: EventEmitter<any[]>;
    beforeRemoveRow: EventEmitter<any[]>;
    beforeRender: EventEmitter<any[]>;
    beforeRenderer: EventEmitter<any[]>;
    beforeRowMove: EventEmitter<any[]>;
    beforeRowResize: EventEmitter<any[]>;
    beforeSetRangeEnd: EventEmitter<any[]>;
    beforeSetRangeStart: EventEmitter<any[]>;
    beforeStretchingColumnWidth: EventEmitter<any[]>;
    beforeTouchScroll: EventEmitter<any[]>;
    beforeUndo: EventEmitter<any[]>;
    beforeValidate: EventEmitter<any[]>;
    beforeValueRender: EventEmitter<any[]>;
    construct: EventEmitter<any[]>;
    init: EventEmitter<any[]>;
    manualRowHeights: EventEmitter<any[]>;
    modifyAutofillRange: EventEmitter<any[]>;
    modifyCol: EventEmitter<any[]>;
    modifyColHeader: EventEmitter<any[]>;
    modifyColumnHeaderHeight: EventEmitter<any[]>;
    modifyColWidth: EventEmitter<any[]>;
    modifyCopyableRange: EventEmitter<any[]>;
    modifyData: EventEmitter<any[]>;
    modifyRow: EventEmitter<any[]>;
    modifyRowData: EventEmitter<any[]>;
    modifyRowHeader: EventEmitter<any[]>;
    modifyRowHeaderWidth: EventEmitter<any[]>;
    modifyRowHeight: EventEmitter<any[]>;
    modifyTransformEnd: EventEmitter<any[]>;
    modifyTransformStart: EventEmitter<any[]>;
    persistentStateLoad: EventEmitter<any[]>;
    persistentStateReset: EventEmitter<any[]>;
    persistentStateSave: EventEmitter<any[]>;
    skipLengthCache: EventEmitter<any[]>;
    unmodifyCol: EventEmitter<any[]>;
    unmodifyRow: EventEmitter<any[]>;
    constructor(el: ElementRef, _ngZone: NgZone, _hotTableRegisterer: HotTableRegisterer, _hotSettingsResolver: HotSettingsResolver);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateHotTable(newSettings: object): void;
    onAfterColumnsChange(): void;
    onAfterColumnsNumberChange(): void;
    addColumn(column: HotColumnComponent): void;
    removeColumn(column: HotColumnComponent): void;
}
